/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"fmt"

	v1alpha1 "github.com/artemiscloud/activemq-artemis-operator/pkg/apis/broker/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActiveMQArtemisAuthenticationLister helps list ActiveMQArtemisAuthentications.
type ActiveMQArtemisAuthenticationLister interface {
	// List lists all ActiveMQArtemisAuthentications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ActiveMQArtemisAuthentication, err error)
	// ActiveMQArtemisAuthentications returns an object that can list and get ActiveMQArtemisAuthentications.
	ActiveMQArtemisAuthentications(namespace string) ActiveMQArtemisAuthenticationNamespaceLister
	ActiveMQArtemisAuthenticationListerExpansion
}

// activeMQArtemisAuthenticationLister implements the ActiveMQArtemisAuthenticationLister interface.
type activeMQArtemisAuthenticationLister struct {
	indexer cache.Indexer
}

// NewActiveMQArtemisAuthenticationLister returns a new ActiveMQArtemisAuthenticationLister.
func NewActiveMQArtemisAuthenticationLister(indexer cache.Indexer) ActiveMQArtemisAuthenticationLister {
	return &activeMQArtemisAuthenticationLister{indexer: indexer}
}

// List lists all ActiveMQArtemisAuthentications in the indexer.
func (s *activeMQArtemisAuthenticationLister) List(selector labels.Selector) (ret []*v1alpha1.ActiveMQArtemisAuthentication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActiveMQArtemisAuthentication))
	})
	return ret, err
}

// ActiveMQArtemisAuthentications returns an object that can list and get ActiveMQArtemisAuthentications.
func (s *activeMQArtemisAuthenticationLister) ActiveMQArtemisAuthentications(namespace string) ActiveMQArtemisAuthenticationNamespaceLister {
	return activeMQArtemisAuthenticationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActiveMQArtemisAuthenticationNamespaceLister helps list and get ActiveMQArtemisAuthentication.
type ActiveMQArtemisAuthenticationNamespaceLister interface {
	// List lists all ActiveMQArtemisAuthentications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ActiveMQArtemisAuthentication, err error)
	// Get retrieves the ActiveMQArtemisAuthentication from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ActiveMQArtemisAuthentication, error)
	ActiveMQArtemisAuthenticationNamespaceListerExpansion
}

// activeMQArtemisAuthenticationNamespaceLister implements the ActiveMQArtemisAuthenticationNamespaceLister
// interface.
type activeMQArtemisAuthenticationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActiveMQArtemisAddresses in the indexer for a given namespace.
func (s activeMQArtemisAuthenticationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActiveMQArtemisAuthentication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActiveMQArtemisAuthentication))
	})
	return ret, err
}

// Get retrieves the ActiveMQArtemisAuthentication from the indexer for a given namespace and name.
func (s activeMQArtemisAuthenticationNamespaceLister) Get(name string) (*v1alpha1.ActiveMQArtemisAuthentication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, fmt.Errorf("activemqartemisauthentication not found: %s", name)
	}
	return obj.(*v1alpha1.ActiveMQArtemisAuthentication), nil
}
